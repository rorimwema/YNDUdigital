// Event create/update mutation
const eventMutation = useMutation({
  mutationFn: async (eventData: any) => {
    if (editingEvent) {
      return await apiRequest("PUT", `/api/events/${editingEvent.id}`, eventData);
    } else {
      return await apiRequest("POST", "/api/events", eventData);
    }
  },
  onSuccess: () => {
    toast({
      title: editingEvent ? "Event updated" : "Event created",
      description: editingEvent 
        ? "The event has been successfully updated." 
        : "The event has been successfully created.",
    });
    queryClient.invalidateQueries({ queryKey: ['/api/events'] });
    setEventFormOpen(false);
    setEditingEvent(null);
  },
  onError: (error: any) => {
    toast({
      title: editingEvent ? "Failed to update event" : "Failed to create event",
      description: error.message || "Something went wrong. Please try again.",
      variant: "destructive",
    });
  }
});

// Event delete mutation
const deleteEventMutation = useMutation({
  mutationFn: async (eventId: number) => {
    return await apiRequest("DELETE", `/api/events/${eventId}`, {});
  },
  onSuccess: () => {
    toast({
      title: "Event deleted",
      description: "The event has been successfully deleted.",
    });
    queryClient.invalidateQueries({ queryKey: ['/api/events'] });
  },
  onError: (error: any) => {
    toast({
      title: "Failed to delete event",
      description: error.message || "Something went wrong. Please try again.",
      variant: "destructive",
    });
  }
});
