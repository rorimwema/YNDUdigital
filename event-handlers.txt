// Event form handlers
const handleEventInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
  const { name, value } = e.target;
  setEventForm(prev => ({ ...prev, [name]: value }));
};

const handleEventCategoryChange = (value: string) => {
  setEventForm(prev => ({ ...prev, category: value }));
};

// Handle event form submission
const handleEventSubmit = (e: React.FormEvent) => {
  e.preventDefault();
  
  // Create event data object
  const eventData = {
    title: eventForm.title,
    description: eventForm.description || null,
    eventDate: new Date(eventForm.eventDate).toISOString(),
    startTime: eventForm.startTime,
    endTime: eventForm.endTime,
    location: eventForm.location,
    imageUrl: eventForm.imageUrl || null,
    category: eventForm.category
  };
  
  eventMutation.mutate(eventData);
};

// Delete event confirmation
const handleDeleteEvent = (eventId: number) => {
  if (window.confirm("Are you sure you want to delete this event? This action cannot be undone.")) {
    deleteEventMutation.mutate(eventId);
  }
};
